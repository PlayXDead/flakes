{
  description = "Flutter + Android SDK Dev Shell with writable SDK, automatic licenses, NDK, cmdline-tools, and emulator";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true;
            android_sdk.accept_license = true;
          };
        };

        androidEnv = pkgs.androidenv.composeAndroidPackages {
          platformVersions = [ "34" ];
          buildToolsVersions = [ "34.0.0" ];
          includeEmulator = true;
          includeNDK = true;
          toolsVersion = "26.1.1";
        };

        flutter-sdk = pkgs.flutter.overrideAttrs (_: {
          src = pkgs.fetchgit {
            url = "https://github.com/flutter/flutter.git";
            rev = "3.22.2";
            sha256 = "sha256-7ndnIw72YxNB+VeeejEeRD+xxuLXOcWo322s5CMWzBM=";
          };
        });

        flutter-wrapper = pkgs.writeShellScriptBin "flutter" ''
          export LD_LIBRARY_PATH="${pkgs.lib.makeLibraryPath [
            pkgs.zlib
            pkgs.libgcc
            pkgs.stdenv.cc.cc.lib
          ]}"
          exec ${flutter-sdk}/bin/flutter "$@"
        '';
      in {
        devShells.default = pkgs.mkShell {
          name = "flutter-android-dev-env";

          buildInputs = [
            pkgs.bashInteractive
            pkgs.git
            pkgs.cmake
            pkgs.ninja
            pkgs.python3
            pkgs.jdk17
            pkgs.gradle
            androidEnv.androidsdk
            androidEnv.emulator
            flutter-wrapper
          ];

          shellHook = ''
            set -e

            # Writable SDK path
            export ANDROID_HOME="$HOME/.android/sdk"
            export ANDROID_SDK_ROOT="$ANDROID_HOME"
            export JAVA_HOME="${pkgs.jdk17}"
            export PATH="$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
            export PATH="${flutter-wrapper}/bin:$PATH"

            mkdir -p "$ANDROID_HOME"

            # Copy cmdline-tools if missing
            if [ ! -d "$ANDROID_HOME/cmdline-tools/latest" ]; then
              mkdir -p "$ANDROID_HOME/cmdline-tools"
              if [ -d "${androidEnv.androidsdk}/cmdline-tools/latest" ]; then
                cp -r ${androidEnv.androidsdk}/cmdline-tools/latest "$ANDROID_HOME/cmdline-tools/"
              elif [ -d "${androidEnv.androidsdk}/cmdline-tools" ]; then
                cp -r ${androidEnv.androidsdk}/cmdline-tools "$ANDROID_HOME/"
              else
                echo "⚠️  Warning: no cmdline-tools found in androidEnv.androidsdk"
              fi
            fi

            # Copy NDK if missing
            if [ ! -d "$ANDROID_HOME/ndk-bundle" ]; then
              cp -r ${androidEnv.androidsdk}/ndk-bundle/. "$ANDROID_HOME/ndk-bundle"
            fi

            # Automatically accept licenses
            mkdir -p "$ANDROID_HOME/licenses"
            for license in android-sdk-license android-sdk-preview-license googletv-license; do
              touch "$ANDROID_HOME/licenses/$license"
            done

            # Force flutter to accept licenses
            yes | flutter doctor --android-licenses || true
            echo "✅ Android SDK licenses accepted."

            # Setup local.properties for Flutter project
            if [ -d "android" ]; then
              mkdir -p android
              {
                echo "sdk.dir=$ANDROID_SDK_ROOT"
                echo "flutter.sdk=$(cd $(dirname $(command -v flutter))/.. && pwd)"
              } > android/local.properties
              echo "Wrote android/local.properties"
            fi

            # Patch android/app/build.gradle for Flutter
            if [ -f "android/app/build.gradle" ]; then
              if ! grep -q 'flutter_tools/gradle/flutter.gradle' android/app/build.gradle; then
                cat > android/app/build.gradle <<'EOF'
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}
apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
EOF
                echo "Patched android/app/build.gradle to include flutter.gradle"
              fi
            fi

            flutter doctor --quiet
            echo "✅ Flutter + Android dev shell ready."
          '';
        };
      }
    );
}


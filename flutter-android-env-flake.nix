{
  description = "Flutter + Android SDK Dev Shell with writable SDK, automatic licenses, NDK, cmdline-tools, emulator, and system image";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05";
    flake-utils.url = "github:numtide/flake-utils";
    android-nixpkgs.url = "github:tadfisher/android-nixpkgs";
  };

  outputs = { self, nixpkgs, flake-utils, android-nixpkgs }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true;
            android_sdk.accept_license = true;
          };
        };

        androidEnv = android-nixpkgs.sdk.${system} (sdkPkgs: with sdkPkgs; [
          cmdline-tools-latest
          build-tools-36-0-0
          platform-tools
          platforms-android-36
          emulator
          ndk-26-1-10909125
          # âœ… include system image inside SDK instead of relying on sdkmanager. This ensures emulator functionality.
          system-images-android-36-google-apis-playstore-x86-64
        ]);

        flutterSdk = pkgs.flutter.overrideAttrs (_: {
          src = pkgs.fetchgit {
            url = "https://github.com/flutter/flutter.git";
            rev = "3.22.2";
            sha256 = "sha256-7ndnIw72YxNB+VeeejEeRD+xxuLXOcWo322s5CMWzBM=";
          };
        });

        flutterWrapper = pkgs.writeShellScriptBin "flutter" ''
          export LD_LIBRARY_PATH="${pkgs.lib.makeLibraryPath [
            pkgs.zlib
            pkgs.libgcc
            pkgs.stdenv.cc.cc.lib
          ]}"
          exec ${flutterSdk}/bin/flutter "$@"
        '';

        # >>> PIN FOR COMPATIBILITY >>>
        gradleVersion = "8.0";
        kotlinVersion = "1.8.20";
        agpVersion = "8.0.0"; # Android Gradle Plugi

        #>>>Gradle & Kotlin version Compatibility in build.kts etc.
        flutterBuildConfigs = pkgs.stdenv.mkDerivation {
          name = "flutter-build-configs";
          src = ./.; # The source is your project directory.
          dontUnpack = true;

          # We generate the file content in this step.
          buildPhase = ''
            mkdir -p $out/android/gradle/wrapper

            # Write the content for build.gradle
            ${pkgs.lib.writeText "build.gradle" ''
              // Top-level build file where you can add configuration options common to all sub-projects/modules.
              buildscript {
                  ext.kotlin_version = '${kotlinVersion}'
                  repositories {
                      google()
                      mavenCentral()
                  }
                  dependencies {
                      classpath 'com.android.tools.build:gradle:${agpVersion}'
                      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
                  }
              }
              allprojects {
                  repositories {
                      google()
                      mavenCentral()
                  }
              }
              tasks.register('clean', Delete) {
                  delete rootProject.buildDir
              }
            ''} > $out/android/build.gradle

            # Write the content for gradle-wrapper.properties
            ${pkgs.lib.writeText "gradle-wrapper.properties" ''
              # Generated by Nix flake
              distributionBase=GRADLE_USER_HOME
              distributionUrl=https\://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip
              distributionPath=wrapper/dists
              zipStoreBase=GRADLE_USER_HOME
              zipStorePath=wrapper/dists
            ''} > $out/android/gradle/wrapper/gradle-wrapper.properties
          '';

          installPhase = "true";
        };

      in
      {
        devShells.default = pkgs.mkShell {
          name = "flutter-android-dev-env";

          buildInputs = [
            pkgs.bashInteractive
            pkgs.git
            pkgs.cmake
            pkgs.ninja
            pkgs.python3
            pkgs.jdk17
            pkgs.gradle
            androidEnv
            flutterWrapper
          ];

          shellHook = ''
            export ANDROID_HOME="$PWD/.android/sdk"
            export ANDROID_SDK_ROOT="$ANDROID_HOME"
            export JAVA_HOME="${pkgs.jdk17}"

            # --- Gradle + Java configuration ---
            export PATH="${pkgs.gradle}/bin:$PATH"
            export GRADLE_HOME="${pkgs.gradle}"
            export ORG_GRADLE_JAVA_HOME="${pkgs.jdk17}"

            # Verify Gradle + Java setup
            echo "ðŸ”§ Using Gradle:"
            ${pkgs.gradle}/bin/gradle --version

            echo "ðŸ”§ Using Java:"
            "$JAVA_HOME/bin/java" -version

            # Ensure all SDK directories exist
            mkdir -p "$ANDROID_HOME/licenses" "$ANDROID_HOME/avd" "$ANDROID_HOME/bin"

            export ANDROID_HOME="$PWD/.android/sdk"
            export ANDROID_SDK_ROOT="$ANDROID_HOME"
            export JAVA_HOME="${pkgs.jdk17}"

            mkdir -p "$ANDROID_HOME/licenses" "$ANDROID_HOME/avd" "$ANDROID_HOME/bin"

            # Copy over SDK parts including system-images now in androidEnv
            cp -LR ${androidEnv}/share/android-sdk/* "$ANDROID_HOME/" || true

            # Copy essential binaries
            for bin in adb avdmanager emulator sdkmanager; do
              cp -LR ${androidEnv}/bin/$bin "$ANDROID_HOME/bin/" || true
            done

            chmod -R u+w "$ANDROID_HOME"
            find "$ANDROID_HOME/bin" "$ANDROID_HOME/platform-tools" "$ANDROID_HOME/emulator" \
                 "$ANDROID_HOME/cmdline-tools/latest/bin" "$ANDROID_HOME/build-tools" \
                 "$ANDROID_HOME/platforms" "$ANDROID_HOME/ndk" -type f -exec chmod +x {} \;

            # Accept licenses
            for license in android-sdk-license android-sdk-preview-license googletv-license; do
              touch "$ANDROID_HOME/licenses/$license"
            done
            yes | flutter doctor --android-licenses || true
            echo "âœ… Android SDK licenses accepted."

            flutter config --android-sdk "$ANDROID_HOME"

            # Pin gradle kotlin versions.
            # Copy the generated build files ONLY if the android directory exists.
            if [ -d "android" ]; then
              echo "Copying pinned Gradle and Kotlin configurations..."
              cp -r ${flutterBuildConfigs}/android/* ./android/
            fi

            ##Potential fix for flutter not building packages adds build{}
	    #if [ -d "android" ]; then
            #  mkdir -p android
            #  echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
            #  echo "flutter.sdk=$(cd $(dirname $(command -v flutter))/.. && pwd)" >> android/local.properties
            #fi

            # Create AVD if missing
            if ! avdmanager list avd | grep -q 'android_emulator'; then
              echo "Creating default AVD: android_emulator"
              yes | avdmanager create avd \
                --name "android_emulator" \
                --package "system-images;android-36;google_apis_playstore;x86_64" \
                --device "pixel" \
                --abi "x86_64" \
                --tag "google_apis_playstore" \
                --force
            fi

            flutter doctor --quiet
            echo "âœ… Flutter + Android dev shell ready."

            echo "ðŸ‘‰ To launch the emulator, run:"
            echo "   emulator -avd android_emulator"
          '';
        };
      }
    );
}
